
ENTER QUICKSORT (1)------------------------------------------
enter: 
0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
0  a  n  e  x  a  m  p  l  e  o  f  q  u  i  c  k  s  o  r  t
   l                                                        r
i                                                           j
v = a[r] = t
r > l => yes;

	first go in while(1)
		while (a[++i] < v) (v = t)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  x  a  m  p  l  e  o  f  q  u  i  c  k  s  o  r  t
		   l                                                        r
		            i                                               j

		while (a[--j] > v) (v = t)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  x  a  m  p  l  e  o  f  q  u  i  c  k  s  o  r  t
		   l                                                        r
		            i                                            j   

		i >= j ? >> no
		t = a[i] = x
		a[i] = a[j] => a[4] = r
		a[j] = t    => a[19] = x
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  r  a  m  p  l  e  o  f  q  u  i  c  k  s  o  x  t
		   l                                                        r
		            i                                            j   

	second go while(1)
		while (a[++i] < v) (v = t)
		while (a[--j] > v) (v = t)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  r  a  m  p  l  e  o  f  q  u  i  c  k  s  o  x  t
		   l                                                        r
		                                       i           j         

		i >= j ? >> no
		t = a[i] = u
		a[i] = a[j] => a[13] = s
		a[j] = t    => a[17] = u
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  r  a  m  p  l  e  o  f  q  s  i  c  k  u  o  x  t
		   l                                                        r
		                                       i           j         
	
	third go in while(1)
		while (a[++i] < v) (v = t)
		while (a[--j] > v) (v = t)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  r  a  m  p  l  e  o  f  q  s  i  c  k  u  o  x  t
		   l                                                        r
		                                                j  i         
	i >= j >> YES

out of while(1)
t = a[i] = u;
a[i] = a[r] => a[17] = a[20] => a[17] = t;
a[r] = t    => a[20] = u;
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  r  a  m  p  l  e  o  f  q  s  i  c  k  t  o  x  u
		   l                                                        r
		                                                j  i         

quicksort(a, l, i - l); = quicksort(a, 1, i - l) = quicksort(a, 1, 17 -1) = quicksort(a, 1, 16) ==> QUICKSORT(2) 
quicksort(a, i + 1, r); ==> QUICKSORT(x)

ENTER QUICKSORT (2)------------------------------------------     >> at exit to QS(1)
parms: 
	l = 1
	r = 16
	a = 
	0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
	0  a  n  e  r  a  m  p  l  e  o  f  q  s  i  c  k  t  o  x  u
	   l                                            r ///////////

	r > l ? => yes
	v = a[r] = k;
	i = l - 1 = 0;
	j = r = 16;

	0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
	0  a  n  e  r  a  m  p  l  e  o  f  q  s  i  c  k  t  o  x  u
	   l                                            r ///////////
	i                                               j ///////////

	first go while(1)
		while (a[++i] < v) (v = k)
		while (a[--j] > v) (v = k)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  n  e  r  a  m  p  l  e  o  f  q  s  i  c  k  t  o  x  u
		   l                                            r ///////////
		      i                                      j    ///////////
		
		i >= j ? >> no
		t = a[i] = n
		a[i] = a[j] => a[2] = c
		a[j] = t    => a[15] = n
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  r  a  m  p  l  e  o  f  q  s  i  n  k  t  o  x  u
		   l                                            r ///////////
		      i                                      j    ///////////
	
	second go in while(1)
		while (a[++i] < v) (v = k)
		while (a[--j] > v) (v = k)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  r  a  m  p  l  e  o  f  q  s  i  n  k  t  o  x  u
		   l                                            r ///////////
		            i                             j       ///////////

		i >= j ? >> no
		t = a[i] = r
		a[i] = a[j] => a[4] = i
		a[j] = t    => a[14] = r
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  m  p  l  e  o  f  q  s  r  n  k  t  o  x  u
		   l                                            r ///////////
		            i                             j       ///////////
	
	third go in while(1)
		while (a[++i] < v) (v = k)
		while (a[--j] > v) (v = k)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  m  p  l  e  o  f  q  s  r  n  k  t  o  x  u
		   l                                            r ///////////
		                  i              j                ///////////

		i >= j ? >> no
		t = a[i] = m
		a[i] = a[j] => a[6] = f
		a[j] = t    => a[11] = m
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  f  p  l  e  o  m  q  s  r  n  k  t  o  x  u
		   l                                            r ///////////
		                  i              j                ///////////
	
	fourth go in while(1)
		while (a[++i] < v) (v = k)
		while (a[--j] > v) (v = k)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  f  e  l  p  o  m  q  s  r  n  k  t  o  x  u
		   l                                            r ///////////
		                     i     j                      ///////////

		i >= j ? >> no
		t = a[i] = p
		a[i] = a[j] => a[7] = e
		a[j] = t    => a[9] = p
	
	fifth go in while(1)
		while (a[++i] < v) (v = k)
		while (a[--j] > v) (v = k)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  f  e  l  p  o  m  q  s  r  n  k  t  o  x  u
		   l                                            r ///////////
		                     j  i                         ///////////

		i >= j ? >> yes

out of while(1)
t = a[i] = l;
a[i] = a[r] => a[8] = a[16] => a[8] = k;
a[r] = t    => a[16] = l;
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  f  e  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l                                            r ///////////
		                     j  i                         ///////////
		
quicksort(a, l, i - l); = QUICKSORT(4)
		a =		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
				0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u

quicksort(a, i + 1, r); = quicksort(a, 9, 16) = QUICKSORT(9)

ENTER QUICKSORT (4)------------------------------------------     >> !to do after exiting qs4: quiksort(a, i + 1, r);
parms:
	a = a
	l = 1
	r = i - l = 7

l = 1
r = 7

		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  f  e  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l                 r  /////////////////////////////////////

r > l ? => yes
	v = a[r] = e;
	i = l - 1 = 0;
	j = r = 7;

		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  e  i  a  f  e  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l                 r  /////////////////////////////////////
		i                    j  /////////////////////////////////////

	first go in while(1)
		while (a[++i] < v) (v = e)
		while (a[--j] > v) (v = e)
		0  1  2  3  4  5  6  7
		0  a  c  e  i  a  f  e
		   l                 r
		         i     j      
		
		i >= j ? >> no
		t = a[i] = e
		a[i] = a[j] => a[3] = a
		a[j] = t    => a[5] = e
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  a  i  e  f  e  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l                 r  /////////////////////////////////////
		         i     j        /////////////////////////////////////
	
	second go in while(1)
		while (a[++i] < v) (v = e)
		while (a[--j] > v) (v = e)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  a  i  e  f  e  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l                 r  /////////////////////////////////////
		         j  i           /////////////////////////////////////

		i >= j ? >> yes, break

out of while(1)
		t = a[i] = i;
		a[i] = a[r] => a[4] = a[7] => a[4] = e;
		a[r] = t => a[7] = i
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l                 r  /////////////////////////////////////
		         j  i           /////////////////////////////////////

quicksort(a, l, i - l); = QUICKSORT(5):
	a = 	0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
			0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u

quicksort(a, i + 1, r); = quicksort (a, 5, 7) = QUICKSORT(8)
	a =		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
			0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u

---------------------exit qs(4) to parent qs(3)-------------------------

ENTER QUICKSORT (5)-----------------------------------------------
parms:
	a = a;
	l = l = 1;
	r = i - l = 4 - 1 = 3;

	l = 1
	r = 3
	0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
	0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
	   l     r  /////////////////////////////////////////////////
	
	r > l ?  yes
		v = a[r] = a;
		i = l - 1 = 0;
		j = r = 3;
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l     r  /////////////////////////////////////////////////
		i        j  /////////////////////////////////////////////////

	first go in while(1)
		while (a[++i] < v) (v = a)
		while (a[--j] > v) (v = a)
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		   l     r  /////////////////////////////////////////////////
		   ij       /////////////////////////////////////////////////
	
	i >= j ? yes -> break

out of while(1)
	t = a[i] => a[1] = a
	a[i] = a[r] => a[1] = a[3] => a[1] = a
	a[r] = t; => a[3] = a
	0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
	0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
	   l     r  /////////////////////////////////////////////////
	   ij       /////////////////////////////////////////////////

quicksort(a, l, i - l); = quicksort(a, 1, i - l) = quicksort(a, 1, 1 - 1) = quicksort(a, 1, 0); QUICKSORT(6):
		a =		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
				0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u

quicksort(a, i + 1, r) = quicksort(a, 2, 3) QUICKSORT(7):
		a =		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
				0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u

----------------------exit qs5 to its parent, qs4----------------

ENTER QUICKSORT (6)----------------------------------------------
parms
l = 1
r = 0
	0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
	0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
	r  l  ///////////////////////////////////////////////////////

r > l ? => NO, EXIT QUICKSORT(6) -------------------------------> go back to parent QS(5)

QUICKSORT(7) ---------------------------------------------------
parms
	a =			0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
				0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
	l = 2;
	r = 3;
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		      l  r  /////////////////////////////////////////////////

r > l ? => yes
	v = a[r] = a;
	i = l - 1 = 2 - 1 = 1;
	j = r = 3
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		      l  r  /////////////////////////////////////////////////
		   i     j  /////////////////////////////////////////////////
	
	first go in while(1)
		while (a[++i] < v) (v = a);
		while (a[--j] > v) (v = a);
			0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
			0  a  c  a  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
			      l  r  /////////////////////////////////////////////////
			   j  i     /////////////////////////////////////////////////
		i >= j >> yes, break

out of while(1)
	t = a[i] = c;
	a[i] = a[r] => a[2] = a;
	a[r] = t; a[3] = c
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		      l  r  /////////////////////////////////////////////////
		   j  i     /////////////////////////////////////////////////

	quicksort(a, l, i - l) = quicksort(a, 2, i - l) = quicksort(a, 2, 0) >> exit immediately (r < l)
	quicksort(a, i + 1, r) = quicksort(a, 2 + 1, 3) = quicksort(a, 3, 3) >> exit immediately (r == l)

------------exit qs(7) to parent = qs(5) ---------------------------------

ENTER QUICKSORT(8)--------------------------------------------------------
a = 		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
			0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u

l = 5
r = 7
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		//////////     l     r  /////////////////////////////////////

r > l ? yes
	v = a[r] = i;
	i = l - 1 = 4;
	j = r = 7;
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		//////////     l     r  /////////////////////////////////////
		//////////  i        j  /////////////////////////////////////

	go in first while(1)
			while (a[++i] < v) ;
			while (a[--j] > v) ;
				0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
				0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
				//////////     l     r  /////////////////////////////////////
				//////////        j  i //////////////////////////////////////
			
			i >= j ? => yes, break;

out of while(1)
		t = a[i];   (swap a[r] and a[i] --> nothing gets swapped)
		a[i] = a[r];
		a[r] = t;
			0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
			0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
			//////////     l     r  /////////////////////////////////////
			//////////        j  i //////////////////////////////////////

		quicksort(a, l, i - l) = quicksort(a, 5, 2) >> exits immediately (r < l);
		quicksort(a, i + 1, r) = quicksort(a, 8, 7) >> exits immediately (r < l);

-----------------exit qs(8) to parent qs(4)---------------------------------------


ENTER QUICKSORT(9)----------------------------------------------------------------

a =		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u

l = 9;
r = 16;
	0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
	0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
	////////////////////////////     l              r////////////

r > l >> yes
	v[a] = a[r] = l;
	i = l - 1 = 10;
	j = r = 16
		0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
		0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
		////////////////////////////     l              r  //////////
		////////////////////////////  i                 j  //////////

	first time go in while(1)
		while (a[++i] < v) (v = l);
		while (a[--j] > v) (v = l);
			0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
			0  a  a  c  e  e  f  i  k  p  o  m  q  s  r  n  l  t  o  x  u
			////////////////////////////     l              r  //////////
			/////////////////////j//////     i                 //////////

ENTER QUICKSORT(17) -------------------------------------------- after qs9 -> exit qs6
parms
	a = a
	l = i + 1 = 2
	r = r = 3

l = 2
r = 3
	1  2  3		//0  1//2  3
	a  c  a		//0  a//c  a
	   l  r		////////l  r

r > l ? => yes
	v = a[r] = a
	i = l - 1 = 1
	j = r = 3
	1  2  3
	a  c  a
	   l  r
	i     j

	first go in while(1)
		while (a[++i] < v) (v = a);
		while (a[--j] > v) (v = a);
			1  2  3
			a  c  a
			   l  r
			j  i   
		
		i >= j ? => no, break

out of while(1)
		t = a[i] = c;
		a[i] = a[r] => a[2] = a[3] => a[2] = a;
		a[r] = t; => a[3] = c
	0	1  2  3
	0	a  a  c
		   l  r
		j  i   

quicksort(a, l, i - l); = QUICKSORT(34)
quicksort(a, i + 1, r); = QUICKSORT(35)

ENTER QUICKSORT(34) ------------------------- to do after qs34: qs35
parms
	a = a;
	l = 2;
	r = i - l = 2 - 2 = 0

l = 2
r = 0
	r > l ?  ==> no! EXIT QUICKSORT(34) ----------------

to do after qs34: QUICKSORT(35)

ENTER QUICKSORT(35) ---------------------------------------
parms
	a = a
	l = i + 1 = 3
	r = 3

l = 3
r = 3
	0	1  2  3
	0	a  a  c
		     lr

r > l ? >> no! EXIT QUICKSORT(35) --------------------------  FINAL: 0  1  2  3
																	    a  a  c
after exit QUICKSORT(35): exit to QUICKSORT(8)
to do after QUICKSORT(8): QUICKSORT(9)

ENTER QUICKSORT(9) -----------------------------------------
state of affairs in QS(4) before entering QS(9):
		0  1  2  3  4  5  6  7
		0  a  c  a  e  e  f  i
		   l                 r
		         j  i         

parms to qs(9): quicksort(a, i + 1, r)
	a = a
	l = i + 1 = 5
	r = 7

l = 5
r = 7
r > l ? >> YES!
	v = a[r] = i;
	i = l - 1 = 5 - 1 = 4;
	j = r = 7
		0  1  2  3  4  5  6  7
		0  a  c  a  e  e  f  i
		               l     r
		            i        j

	first go in while(1)
		while (a[++i] < v) (v = i);
		while (a[--j] > v) (v = i);
			0  1  2  3  4  5  6  7
			0  a  c  a  e  e  f  i
			               l     r
			                  j  i
	
	i >= j ? >> yes, break

out of while(1)
	t = a[i] = a[7] = i;
	a[i] = a[r];  a[7] = a[7] = i
	a[r] = t;
		0  1  2  3  4  5  6  7
		0  a  c  a  e  e  f  i
		               l     r
		                  j  i

quicksort(a, l, i - l); = QUICKSORT(18)
quicksort(a, i + 1, r); = QUICKSORT(19);

ENTER QUICKSORT(18)-------------------------------- to do after qs 18 = qs 19
parms
	a = a
	l = 5
	r = i - l = 7 - 5 = 2;

l = 5
r = 2
r > l ? NO --> exit QS(18) ------------------------

after QS(18) --> QS(19)----------------------------
state of affairs in QS(9) before entering QS(19)


